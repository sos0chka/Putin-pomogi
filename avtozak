#define _CRT_SECURE_NO_DEPRECATE
#include <png.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

int counter = 0;
void make_picture(int** array, int n, int max, int m);
struct color_array
{
	int value;
	int color;
};
int* Make_1D_array(int n)
{
	int* array = (int*)calloc(n, sizeof(int));
	for (int i = 0; i < n; ++i)
		array[i] = 0;
	return array;
}
int** Make_2D_array(int n, int m)
{
	int** array = (int**)calloc(m, sizeof(int*));
	for (int i = 0; i < m; ++i)
		array[i] = Make_1D_array(n);
	return array;
}
int** Make_struct_array(int n)
{
	int* array = (int*)malloc(n * sizeof(int));
	for (int i = 0; i < n; ++i)
		array[i] = (struct color_array*)malloc(sizeof(struct color_array));
	return array;
}
void Print1DArray(const int* array, int x)
{
	for (int i = 0; i < x; ++i)
		printf("%d\t", array[i]);
	printf("\n");
}
void Print_2D_array(const int** array, int x, int y)
{
	for (int i = 0; i < y; ++i)
		Print1DArray(array[i], x);
	printf("\n");
}
void Print_struct_array(struct color_array* const array, int x)
{
	for (int i = 0; i < x; ++i)
		printf("%d\t", array[i].value);
	printf("\n");
}
int Max(struct color_array* array, int n)
{
	int max = 0;
	for (size_t i = 0; i < n; i++)
	{
		if (array[i].value > max)
			max = array[i].value;
	}
	return max;
}
int** Copy(int** array,int** array2, int n, int m)
{
	for (size_t i = 0, k = m - 1; i < m; i++, k--)
	{
		for (size_t j = 0; j < n; j++)
		{
			array2[i][j] = array[k][j];
		}
	}
	return array2;
}
void Make_matrix(struct color_array* array, int n, int m)
{
	int max = Max(array, n);
	int** matrix = Make_2D_array(n, max);
	for (size_t i = 0; i < n; i++)
	{
		for (size_t j = 0; j < max; j++)
		{
			if (array[i].value > j + 1)
			{
				matrix[j][i] = 2;
			}
			if (array[i].value == j + 1)
			{
				matrix[j][i] = array[i].color;
			}
		}
	}
	int** matrix2 = Make_2D_array(n, max);
	matrix2 = Copy(matrix,matrix2, n, max);

	for (int i = 0; i < max; ++i)
		free(matrix[i]);
	free(matrix);
	matrix = NULL;

	make_picture(matrix2, n, max, m);

	for (int i = 0; i < max; ++i)
		free(matrix2[i]);
	free(matrix2);
	matrix2 = NULL;
}
void shell_sort(struct color_array* array, int n, int m)
{
	for (int s = n / 2; s > 0; s /= 2)
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = i + s; j < n; j += s)
			{
				if (array[i].value > array[j].value)
				{
					int temp = array[j].value;
					array[j].value = array[i].value;
					array[i].value = temp;

					int temp_color = array[j].color;
					array[j].color = array[i].color;
					array[i].color = temp_color;
					Make_matrix(array, n, m);
				}
			}
		}
	}
}
void Random(struct color_array* array, int n)
{
	int metka = 0;
	for (size_t i = 0; i < n;)
	{
		metka = 0;
		int x = rand() % n + 1;
		for (size_t j = 0; j < i; j++)
		{
			if (array[j].value == x)
			{
				metka = 1;
				break;
			}
		}
		if (metka == 0)
		{
			array[i].value = x;
			array[i].color = 1;
			i++;
		}
	}
	array[n - 1].value = array[n / 2].value = array[0].value;
	array[n - 1].color = 5;
	array[n / 2].color = 4;
	array[0].color = 3;
}
/* A coloured pixel. */

typedef struct {
	uint8_t red;
	uint8_t green;
	uint8_t blue;
	uint8_t alpha;
} pixel_t;

/* A picture. */

typedef struct {
	pixel_t* pixels;
	size_t width;
	size_t height;
} bitmap_t;

/* Given "bitmap", this returns the pixel of bitmap at the point
("x", "y"). */

static pixel_t* pixel_at(bitmap_t* bitmap, int x, int y)
{
	return bitmap->pixels + bitmap->width * y + x;
}

/* Write "bitmap" to a PNG file specified by "path"; returns 0 on
success, non-zero on error. */

static int save_png_to_file(bitmap_t* bitmap, const char* path)
{
	FILE* fp;
	png_structp png_ptr = NULL;
	png_infop info_ptr = NULL;
	size_t x, y;
	png_byte** row_pointers = NULL;
	/* "status" contains the return value of this function. At first
	it is set to a value which means 'failure'. When the routine
	has finished its work, it is set to a value which means
	'success'. */
	int status = -1;
	/* The following number is set by trial and error only. I cannot
	see where it it is documented in the libpng manual.
	*/
	int pixel_size = 4;
	int depth = 8;

	fp = fopen(path, "wb");
	if (!fp) {
		goto fopen_failed;
	}

	png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (png_ptr == NULL) {
		goto png_create_write_struct_failed;
	}

	info_ptr = png_create_info_struct(png_ptr);
	if (info_ptr == NULL) {
		goto png_create_info_struct_failed;
	}

	/* Set up error handling. */

	if (setjmp(png_jmpbuf(png_ptr))) {
		goto png_failure;
	}

	/* Set image attributes. */

	png_set_IHDR(png_ptr,
		info_ptr,
		bitmap->width,
		bitmap->height,
		depth,
		PNG_COLOR_TYPE_RGBA,
		PNG_INTERLACE_NONE,
		PNG_COMPRESSION_TYPE_DEFAULT,
		PNG_FILTER_TYPE_DEFAULT);

	/* Initialize rows of PNG. */

	row_pointers = png_malloc(png_ptr, bitmap->height * sizeof(png_byte*));
	for (y = 0; y < bitmap->height; ++y) {
		png_byte* row =
			png_malloc(png_ptr, sizeof(uint8_t) * bitmap->width * pixel_size);
		row_pointers[y] = row;
		for (x = 0; x < bitmap->width; ++x) {
			pixel_t* pixel = pixel_at(bitmap, x, y);
			*row++ = pixel->red;
			*row++ = pixel->green;
			*row++ = pixel->blue;
			*row++ = pixel->alpha;
		}
	}

	/* Write the image data to "fp". */

	png_init_io(png_ptr, fp);
	png_set_rows(png_ptr, info_ptr, row_pointers);
	png_write_png(png_ptr, info_ptr, PNG_TRANSFORM_IDENTITY, NULL);

	/* The routine has successfully written the file, so we set
	"status" to a value which indicates success. */

	status = 0;

	for (y = 0; y < bitmap->height; y++) {
		png_free(png_ptr, row_pointers[y]);
	}
	png_free(png_ptr, row_pointers);

png_failure:
png_create_info_struct_failed:
	png_destroy_write_struct(&png_ptr, &info_ptr);
png_create_write_struct_failed:
	fclose(fp);
fopen_failed:
	return status;
}

/* Given "value" and "max", the maximum value which we expect "value"
to take, this returns an integer between 0 and 255 proportional to
"value" divided by "max". */

static int pix(int value, int max)
{
	if (value < 0)
		return 0;
	return (int)(256.0 * ((double)(value) / (double)max));
}

void make_picture(int** array, int n, int max, int m)
{
	bitmap_t fruit;
	int x;
	int y;

	fruit.width = n * m;
	fruit.height = max * m;

	fruit.pixels = calloc(sizeof(pixel_t), fruit.width * fruit.height);
	for (y = 0; y < fruit.height; y++)
	{
		for (x = 0; x < fruit.width; x++)
		{
			for (int k = 0; k < m; k++)
			{
				if (array[y / m][x / m] == 0)
				{
					pixel_t* pixel = pixel_at(&fruit, x, y);
					pixel->red = 255;
					pixel->green = 255;
					pixel->blue = 255;
					pixel->alpha = 255;
				}
				if (array[y / m][x / m] == 1)
				{
					pixel_t* pixel = pixel_at(&fruit, x, y);
					pixel->red = 0;
					pixel->green = 0;
					pixel->blue = 0;
					pixel->alpha = 255;
				}
				if (array[y / m][x / m] == 2)
				{
					pixel_t* pixel = pixel_at(&fruit, x, y);
					pixel->red = 128;
					pixel->green = 128;
					pixel->blue = 128;
					pixel->alpha = 255;
				}
				if (array[y / m][x / m] == 3)
				{
					pixel_t* pixel = pixel_at(&fruit, x, y);
					pixel->red = 255;
					pixel->green = 0;
					pixel->blue = 0;
					pixel->alpha = 255;
				}
				if (array[y / m][x / m] == 4)
				{
					pixel_t* pixel = pixel_at(&fruit, x, y);
					pixel->red = 0;
					pixel->green = 255;
					pixel->blue = 0;
					pixel->alpha = 255;
				}
				if (array[y / m][x / m] == 5)
				{
					pixel_t* pixel = pixel_at(&fruit, x, y);
					pixel->red = 0;
					pixel->green = 0;
					pixel->blue = 255;
					pixel->alpha = 255;
				}
			}
		}
	}
	counter++;
	save_png_to_file(&fruit, "fruit.png");
	char buffer[100];
	sprintf(buffer, "%07d.png", counter);
	save_png_to_file(&fruit, buffer);

	free(fruit.pixels);
}
int do_count = 0;
int menu(int argc, char** argv, int* n, int* m)
{
	if (strcmp("-h", argv[1]) == 0)
	{
		printf("Program for shell sort visualization.\nGeneral options :\n\t-n[--number]\tNumber of values to sort\n\t- s[--size]\tBox size for each value(in pixels)\n\t- c[--complexity]\tPrint number of swaps / comparisions\n\t- h[--help]\tShow help\n");
		return 0;
	}
	else
	{
		for (size_t i = 1; i < argc; i++)
		{
			if (strcmp("-n", argv[i]) == 0)
			{
				*n = atoi(argv[i + 1]);
			}
			else if (strcmp("-s", argv[i]) == 0)
			{
				*m = atoi(argv[i + 1]);
			}
			else if (strcmp("-c", argv[i]) == 0)
			{
				do_count = 1;
			}
		}
		return 1;
	}
}
int main(int argc, char** argv)
{
	srand(time(0));
	int n = 30; int m = 15;
	int ret = menu(argc, argv, &n, &m);
	if (ret == 0)
	{
		return 0;
	}
	else if (ret == 1)
	{		
		struct color_array* array = (struct color_array*)malloc(n * sizeof(struct color_array));
		Random(array, n);
		shell_sort(array, n, m);
		free(array);
		array = NULL;
		if (do_count == 1) { printf("Done! Number of swaps = %d", counter); }
		else { printf("Done! "); }
		return 0;
	}
}
